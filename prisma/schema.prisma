// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    // url      = env("DATABASE_URL")
    url      = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String         @id @default(cuid())
    name            String?
    email           String?        @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    posts           Post[]
    messages        Message[]      @relation("UserMessages")
    conversations   Conversation[] @relation("UserConversations")
    readByUsers     Message[]      @relation("MessageReadUsers")
    deletedMessages Message[]      @relation("MessageDeletedUsers")
    readMessages    MessageRead[]
}
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Message {
    id            String         @id @default(cuid())
    type          MessageType    @default(TEXT)
    content       String?
    timestamp     DateTime       @default(now())
    isDeleted     Boolean        @default(false)
    sender        User           @relation("UserMessages", fields: [senderId], references: [id])
    senderId      String
    conversation  Conversation?  @relation(fields: [conversationId], references: [id])
    conversationId String?
    readBy        User[]         @relation("MessageReadUsers")
    deletedFor    User[]         @relation("MessageDeletedUsers")
    readRecords   MessageRead[]
    files         File[]         @relation("MessageFiles")

    @@index([conversationId, timestamp])
}

model MessageRead {
    id        String   @id @default(cuid())
    userId    String
    messageId String
    readAt    DateTime @default(now())

    user      User     @relation(fields: [userId], references: [id])
    message   Message  @relation(fields: [messageId], references: [id])

    @@unique([userId, messageId])
}

model Conversation {
    id            String   @id @default(cuid())
    name          String?
    isGroup       Boolean  @default(false)
    participants  User[]   @relation("UserConversations")
    messages      Message[]
    groupId       String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model File {
    id       String    @id @default(cuid())
    url      String    // ファイルの保存場所
    fileType FileType  // ファイルタイプ
    message  Message   @relation("MessageFiles", fields: [messageId], references: [id]) // 逆のリレーションを定義
    messageId String
}


enum MessageType {
    TEXT
    IMAGE
    LINK
    NOTIFICATION
}


enum FileType {
    IMAGE
    DOCUMENT
    PDF
    VIDEO
    AUDIO
}